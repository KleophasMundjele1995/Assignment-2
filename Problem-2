# Assigning multiple initial values of Alpha and Beta to max and min variables
max, min = 1000, -1000

# Returning optimal value for current player
def miniMax(depth, nodeIndex, maxiMisingPlayer, values, alpha, beta)

# Conditional evaluation
if depth == 3
return values[nodeIndex]

elseif maxiMisingPlayer
best = min
end

for i in 0:2
val = miniMax(depth + 1, nodeIndex * 2 + i, values, alpha, beta)
best = max(best, val)
alpha = max(alpha, best)

while false

# Alpha Beta Pruning
if beta <= alpha
break

end
return best

end
else

best = max
for i in 0:2
val = miniMax(depth + 1, nodeIndex * 2 + i, values, alpha, beta)
best = min(best, val)
alpha = min(alpha, best)

while true

# Alpha Beta Pruning
if beta <= alpha
break
end
return best
end

if name == main
values = [0, 2, 3, 1, -2, 4]
print("Final result is :", miniMax(0, 0, true, values, min, max))
